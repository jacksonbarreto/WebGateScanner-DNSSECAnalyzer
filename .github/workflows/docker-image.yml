# .github/workflows/
name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Run Go tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
              ${{ runner.os }}-go-

      - name: Run tests
        run: |
          go mod download
          go test -v ./...

  versioning:
    name: Versioning
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag}}
    steps:
      - uses: actions/checkout@v4

      - name: Calculate new version
        id: version
        run: |
          lastTag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "0.0.0")
          
          if [ "$lastTag" == "0.0.0" ]; then
            MAJOR=0
            MINOR=1
            PATCH=0
            commitMessages=$(git log --oneline)
          else
            IFS='.' read -ra VERSION <<< "$lastTag"
            MAJOR=${VERSION[0]:-0}
            MINOR=${VERSION[1]:-0}
            PATCH=${VERSION[2]:-0}
            commitMessages=$(git log $lastTag..HEAD --oneline)  
          fi
          
          if [[ $commitMessages == *"feat!"* ]]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [[ $commitMessages == *"feat"* ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif [[ $commitMessages == *"fix"* ]] || [[ -z "$commitMessages" ]] && [ "$lastTag" != "0.0.0" ]; then
            PATCH=$((PATCH+1))
          fi
          
          new_tag="$MAJOR.$MINOR.$PATCH"
          echo "new_tag=$new_tag" >> $GITHUB_ENV

  build-and-push-docker-image:
    name: Build and Push Docker Image
    needs: [test, versioning]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image and push to DockerHub
        run: |
          REPO=$(echo "${GITHUB_REPOSITORY}" | tr '[:upper:]' '[:lower:]')
          TAG="${{ needs.versioning.outputs.new_tag }}"
          docker build . --file Dockerfile --tag $REPO:$TAG
          docker push $REPO:$TAG
          docker tag $REPO:$TAG $REPO:latest
          docker push $REPO:latest

  push-tag-and-create-release:
    name: Push Tag and Create Release
    needs: [test, versioning, build-and-push-docker-image]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Generate release notes
        id: generate_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
          if [[ -z "$LAST_TAG" ]]; then
            RELEASE_NOTES="starting"
          else
            RELEASE_NOTES=$(git log $LAST_TAG..${{ needs.versioning.outputs.new_tag }} --pretty=format:"- %s")
          fi
          echo "RELEASE_NOTES=$RELEASE_NOTES" >> $GITHUB_ENV

      - name: Push tag
        run: |
          git tag ${{ needs.versioning.outputs.new_tag }}
          git push origin ${{ needs.versioning.outputs.new_tag }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.new_tag }}
          release_name: Release ${{ needs.versioning.outputs.new_tag }}
          draft: false
          prerelease: false
          body: ${{ env.RELEASE_NOTES }}
